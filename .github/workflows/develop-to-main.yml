name: Develop to Main Merge

on:
  push:
    branches:
      - develop

jobs:
  test-and-merge:
    if: "!contains(github.event.head_commit.message, '#auto-release')"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # Verwende dajor's PAT für Berechtigungen auf private Repos und Push-Zugriff
          token: ${{ secrets.TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm install
          npm ci

      - name: Run tests
        run: npm test

      - name: Get current version
        id: version
        run: |
          CURRENT_VERSION=$(cat version.txt)
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Increment version
        id: increment
        run: |
          CURRENT_VERSION=$(cat version.txt)
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
          NEW_PATCH=$((patch + 1))
          NEW_VERSION="$major.$minor.$NEW_PATCH"
          echo "$NEW_VERSION" > version.txt
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create release notes
        run: |
          # Erstelle temporäre Datei mit neuer Version
          echo "# Version ${{ steps.increment.outputs.new_version }}" > release-notes.tmp
          echo "Datum: $(date +'%d.%m.%Y')" >> release-notes.tmp
          echo "" >> release-notes.tmp
          echo "## Änderungen" >> release-notes.tmp
          # Hole alle Commits seit dem letzten Tag
          git log --since="1 day ago" --pretty=format:"- %s (%an)" >> release-notes.tmp
          echo "" >> release-notes.tmp
          echo "## Technische Details" >> release-notes.tmp
          echo "- Build: ${{ github.run_id }}" >> release-notes.tmp
          echo "- Commit: ${{ github.sha }}" >> release-notes.tmp
          echo "" >> release-notes.tmp
          echo "---" >> release-notes.tmp
          echo "" >> release-notes.tmp
          
          # Füge bestehende Release Notes hinzu, falls vorhanden
          if [ -f release-notes.txt ]; then
            cat release-notes.txt >> release-notes.tmp
          fi
          
          # Ersetze die alte Datei mit der neuen
          mv release-notes.tmp release-notes.txt

      - name: Push changes
        run: |
          git config --global user.name 'dajor'
          git config --global user.email 'daniel.jordan@fellowpro.com'
          git checkout develop
          git add version.txt release-notes.txt
          git commit -m "Bump version to ${{ steps.increment.outputs.new_version }} #auto-release"
          git remote set-url origin https://${{ secrets.TOKEN }}@github.com/dajor/bewirtungsbeleg.git
          git pull origin develop
          git push origin develop

      - name: Push release to main
        run: |
          git fetch origin
          git checkout main
          git merge develop --no-ff -m "Release v${{ steps.increment.outputs.new_version }}"
          git remote set-url origin https://${{ secrets.TOKEN }}@github.com/dajor/bewirtungsbeleg.git
          git push origin main